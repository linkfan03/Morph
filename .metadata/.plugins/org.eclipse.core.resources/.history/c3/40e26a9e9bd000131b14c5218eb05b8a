package morphgame;

import java.applet.Applet;


import java.applet.AudioClip;

import java.awt.Color;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;

public class StartingClass extends Applet implements Runnable, KeyListener {
	enum GameState {
		Running, Dead, MainMenu, Leaderboard, InstructMenu
	}

	
	private static GameState state = GameState.MainMenu;

	//characters
	private static MainCharacter mainCharacter;
	private static LeaderBoard leaderBoard;
	
	//sound 
	private AudioClip jumpSound,menuSound;

	private Font font = new Font(null, Font.BOLD, 30);
	private Image image, character, characterDown, characterJumped,
			characterForward, characterBack, currentSprite, background;
	private Graphics second;
	private URL base;
	private static Background bg1, bg2;
	public static Image tilegrassTop, tilegrassMorph, tilegrassLeft,
			tilegrassRight, tiledirt, tileSpike,deadScreen;


	private static Menu menu;
	private ArrayList<Tile> tilearray = new ArrayList<Tile>();

	
	//This initializes the window that the game will be played in
	//It also initializes the images used for characters and backgrounds
	@Override
	public void init() {
		
		setSize(getWindowWidth(), getWindowHeight());
		addMouseListener(new MouseInput());
		setFocusable(true);
		setBackground(Color.BLACK);
		addKeyListener(this);
		Frame frame = (Frame) this.getParent().getParent();
		frame.setTitle("Morph");
		try {
			base = getDocumentBase();
		} catch (Exception e) {
			// TODO: handle exception
		}
	
		leaderBoard = new LeaderBoard();
		menu = new Menu(leaderBoard);
		
		soundStart();
		
		background = getImage(base, "data/backgroundMockUp1.png");

		tiledirt = getImage(base, "data/tiledirt.png");
		tilegrassTop = getImage(base, "data/tilegrasstop.png");
		tilegrassMorph = getImage(base, "data/tilegrassbot.png");
		tilegrassLeft = getImage(base, "data/tilegrassleft.png");
		tilegrassRight = getImage(base, "data/tilegrassright.png");
		tileSpike = getImage(base, "data/tileSpike.png");
	}
	
	//images related to square morph 
	public void squareImages(){
		mainCharacter.setMorph("square");
		character = getImage(base, "data/square.png");
		characterDown = getImage(base, "data/down.png");
		characterJumped = getImage(base, "data/squareJump.png");
		characterForward = getImage(base, "data/squareForward.png");
		characterBack = getImage(base, "data/squareBack.png");

		currentSprite = character;
	}
	
	//images related to circle morph 
	public void circleImages(){
		mainCharacter.setMorph("circle");
		character = getImage(base, "data/circle.png");
		characterDown = getImage(base, "data/down.png");
		characterJumped = getImage(base, "data/circleJump.png");
		characterForward = getImage(base, "data/circleForward.png");
		characterBack = getImage(base, "data/circleBack.png");
		currentSprite = character;
	}
	//images related to balloon morph
	public void balloonImages(){
		mainCharacter.setMorph("balloon");
		character = getImage(base,"data/balloon.png");
		characterDown = getImage(base,"data/balloon.png");
		characterJumped = getImage(base,"data/balloon.png");
		characterForward = getImage(base, "data/balloonForward.png");
		characterBack = getImage(base, "data/balloonBack.png");
		currentSprite = character;
	}
	
	//load sounds
	public void soundStart(){
		jumpSound = getAudioClip(base,"data/jumping.wav");
	}
	
	//This method initializes the backgrounds and the main character
	//Then it starts the game loop
	@Override
	public void start() {
		
		bg1 = new Background(0, 0);
		bg2 = new Background(2160, 0);
	
		mainCharacter = new MainCharacter();
		//1st morph is a square
		squareImages();
		//load sounds
		
		// Initialize Tiles
		try {
			loadMap("data/map1.txt");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		Thread thread = new Thread(this);
		thread.start();
	}

	private void loadMap(String filename) throws IOException {
		ArrayList lines = new ArrayList();
		int width = 0;
		int height = 0;

		BufferedReader reader = new BufferedReader(new FileReader(filename));
		while (true) {
			String line = reader.readLine();
			// no more lines to read
			if (line == null) {
				reader.close();
				break;
			}

			if (!line.startsWith("!")) {
				lines.add(line);
				width = Math.max(width, line.length());

			}
		}
		height = lines.size();

		for (int j = 0; j < 12; j++) {
			String line = (String) lines.get(j);
			for (int i = 0; i < width; i++) {

				if (i < line.length()) {
					char ch = line.charAt(i);
					Tile t = new Tile(i, j, Character.getNumericValue(ch));
					tilearray.add(t);
				}

			}
		}

	}
	
	//This isn't used yet
	@Override
	public void stop() {
		// TODO Auto-generated method stub
	}
	
	//This isn't used yet
	@Override
	public void destroy() {
		// TODO Auto-generated method stub
	}

	//This is the main game loop
	//Controls when updates are made to the character's sprite
	//and location of the character to the background	
	@Override
	public void run() {
		while (true) {
			if (state == GameState.Running) {
				mainCharacter.update();
				if (mainCharacter.isMovingLeft()) {
					currentSprite = characterBack;
				} else if (mainCharacter.isMovingRight()) {
					currentSprite = characterForward;
				} else if (mainCharacter.isJumped()) {
					currentSprite = characterJumped;
				} else if (mainCharacter.isJumped() == false
						&& mainCharacter.isDucked() == false) {
					currentSprite = character;
				}
				updateTiles();
				bg1.update();
				bg2.update();
				repaint();
				
				if (mainCharacter.getCenterY() > 500) {
					//revert to start
					
					state = GameState.Dead;						
					leaderBoard.newScore(mainCharacter.getScore());
				}
				else if (mainCharacter.getTouchingSpikes() == true){
					//revert to start
					
					state = GameState.Dead;
					leaderBoard.newScore(mainCharacter.getScore());
				}
			}else {
				
				//to show leaderboard
				repaint();
			}
			try {
				Thread.sleep(17);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}

	
	
	//This acts another graphics buffer 
	//Without this graphics will be choppy	
	@Override
	public void update(Graphics g) {
		if (image == null) {
			image = createImage(this.getWidth(), this.getHeight());
			second = image.getGraphics();
		}

		second.setColor(getBackground());
		second.fillRect(0, 0, getWidth(), getHeight());
		second.setColor(getForeground());
		paint(second);

		g.drawImage(image, 0, 0, this);

	}

	//Outputs graphics to the screen	
	@Override
	public void paint(Graphics g) {
		g.setFont(font);
		if (state == GameState.Running) {

			g.drawImage(background, bg1.getBgX(), bg1.getBgY(), this);
			g.drawImage(background, bg2.getBgX(), bg2.getBgY(), this);
			paintTiles(g);

			g.drawImage(currentSprite, mainCharacter.getCenterX() - 61,
					mainCharacter.getCenterY() - 63, this);

			g.setFont(font);
			g.setColor(Color.WHITE);
			g.drawString(Integer.toString(mainCharacter.getScore()), 740, 30);

		} else {
			menu.update(g, state);
			respawn();
		}
	}

	private void updateTiles() {

		for (int i = 0; i < tilearray.size(); i++) {
			Tile t = (Tile) tilearray.get(i);
			t.update();
		}

	}

	private void paintTiles(Graphics g) {
		for (int i = 0; i < tilearray.size(); i++) {
			Tile t = (Tile) tilearray.get(i);
			g.drawImage(t.getTileImage(), t.getTileX(), t.getTileY(), this);
		}
	}
	
	public void changeMorph(){
		if(mainCharacter.getMorph().equals("square")){
			circleImages();
		}else if(mainCharacter.getMorph().equals("circle")){
			balloonImages();
		}else if(mainCharacter.getMorph().equals("balloon")){
			squareImages();
		}
	}
	//when character dies we need to start at the beginning of the level
	public void respawn(){
		
		start();
	}

	//When the key is released we need to have the character return to the natural starting position	
	public void keyPressed(KeyEvent e) {

		switch (e.getKeyCode()) {

		case KeyEvent.VK_DOWN:
			currentSprite = characterDown;
			if (mainCharacter.isJumped() == false) {
				mainCharacter.setDucked(true);
				mainCharacter.setSpeedX(0);
			}
			break;

		case KeyEvent.VK_LEFT:
			mainCharacter.moveLeft();
			mainCharacter.setMovingLeft(true);
			break;
			

		case KeyEvent.VK_RIGHT:
			mainCharacter.moveRight();
			mainCharacter.setMovingRight(true);
			break;

		case KeyEvent.VK_SPACE:
			mainCharacter.jump();
			jumpSound.play();
			break;

		case KeyEvent.VK_1:
			changeMorph();
			break;
		}

	}

	//When the key is released we need to have the character return to the natural starting position	
	@Override
	public void keyReleased(KeyEvent e) {
		switch (e.getKeyCode()) {

		case KeyEvent.VK_DOWN:
			currentSprite = character;
			mainCharacter.setDucked(false);
			break;

		case KeyEvent.VK_LEFT:
			mainCharacter.stopLeft();
			break;

		case KeyEvent.VK_RIGHT:
			mainCharacter.stopRight();
			break;

		case KeyEvent.VK_SPACE:
			break;

		case KeyEvent.VK_1:
			break;
		}

	}

    //not used yet	
	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub
	}

	//Gets background 1
	public static Background getBg1() {
		return bg1;
	}

	//Gets background 2	
	public static Background getBg2() {
		return bg2;
	}

	public static MainCharacter getMainCharacter() {
		return mainCharacter;
	}
	
	public static int getWindowWidth(){
		return 800;
	}
	
	public static int getWindowHeight(){
		return 480;
	}
	
	public static GameState getState(){
		return state;
	}
	
	public static void setState(GameState gameState){
		state = gameState;
	}

	public static void submitScore() {
		menu.submitScore();
		
	}
}
